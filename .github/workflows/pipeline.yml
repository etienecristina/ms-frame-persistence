name: Build ECR image

on:
  push:
    branches:
#      - main

jobs:
  sonar:
    name: SonarCloud Execution
    runs-on: ubuntu-latest
    environment:
      name: aws

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        exclude: []

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: SonarCloud Execution
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=HenriqueSaKi_ms-frame-persistence

  build-ECR:
    name: Build ECR image
    runs-on: ubuntu-latest
    needs: sonar

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Authenticate on AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: 'us-east-1'

      - name: Connecting to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t product:latest .

      - name: Publish to ECR
        env:
          ECR_URL: 345124661122.dkr.ecr.us-east-1.amazonaws.com/frame-persistence
        run: |
          docker tag frame-persistence:latest $ECR_URL:latest
          docker push $ECR_URL:latest

  deploy-pre:
    name: Deploy Pre
    runs-on: ubuntu-latest
    needs: build-ECR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Authenticate on AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: 'us-east-1'

      - name: Install Kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Update Kube Config
        env:
          EKS_CLUSTER_NAME: "EKS-FIAP-hackathon"
        run: aws eks update-kubeconfig --region us-east-1 --name $EKS_CLUSTER_NAME

#      - name: Deploy Secrets
#        run: kubectl apply -f k8s/eks-frame-secrets.yaml
#
#      - name: Deploy ConfigMaps
#        run: kubectl apply -f k8s/eks-frame-configmaps.yaml

      - name: Deploy Pre
        run: |
          kubectl apply -f k8s/eks-frame-svc.yaml
          kubectl apply -f k8s/eks-frame-deployment.yaml
